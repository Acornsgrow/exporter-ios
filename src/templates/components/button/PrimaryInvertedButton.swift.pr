{[ inject "auto_generated_comment" context self /]}

import SwiftUI

/// THe inverted variation of the primary button used in Acorns.
///
/// - Parameter label: A `String` which will display as the main text of the button
/// - Parameter isButtonEnabled: A `Binding` which will enable or disable various states and actions on the `PrimaryInvertedButton`
/// - Parameter action: a closure to be invoked when `PrimaryInvertedButton` is interacted with
public struct PrimaryInvertedButton: View {

    private let label: String
    @Binding private var isButtonEnabled: Bool
    private let action: () -> Void

    public init(
        label: String,
        isButtonEnabled: Binding<Bool>,
        action: @escaping () -> Void
    ) {
        self.label = label
        self._isButtonEnabled = isButtonEnabled
        self.action = action
    }

    public var body: some View {
        Button(label) {
            if isButtonEnabled { action() }
        }
        .buttonStyle(PrimaryInvertedButtonStyle(isButtonEnabled: $isButtonEnabled))
    }
}

internal struct PrimaryInvertedButtonStyle: ButtonStyle {
    @Binding var isButtonEnabled: Bool

    internal init(isButtonEnabled: Binding<Bool>) {
        self._isButtonEnabled = isButtonEnabled
    }

    internal func makeBody(configuration: Self.Configuration) -> some View {
        configuration.label
            .font(Font.custom("AvenirNext-DemiBold", size: 14))
            .frame(maxWidth: .infinity)
            .frame(height: 44)
            .overlay(
                RoundedRectangle(cornerRadius: 22)
                    .stroke(isButtonEnabled ? Color.GroveColors.Button.ButtonBorderColorSecondaryHover : .GroveColors.Button.ButtonBorderColorSecondaryBase, lineWidth: 1)
            )
            .foregroundColor(.GroveColors.Button.ButtonTextColorBase)
            .background(Color.GroveColors.Button.ButtonTextColorSecondaryBase)
            .disabled(!isButtonEnabled)
            .clipShape(Capsule())
            .opacity(configuration.isPressed && isButtonEnabled ? 0.8 : 1.0)
    }
}
